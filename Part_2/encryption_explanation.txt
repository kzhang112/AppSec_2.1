Encryption of Database: Looking at the current LegacyGift and GiftcardSite, I will say there is something to be said about securing of private information. The fact that we were easily able to leverage a vulnerability in obtaining an administrative password speaks volumes to the type of security an application has without any form of encryption. Django itself has many options for encryption, but I decided to go with Django-cryptography. A relatively small-scale and easy-to-implement (as easy as adding 'encryptâ€™) library, we are given a form a bidirectionality when it comes to storing and retrieving data.

In implementing encryption, we have made changes to 'models.py' within the LegacySite and 'settings.py' within the GiftcardSite. Out of the two, 'settings.py' is far more important in that it is the program we use to implement the bulk of the encryption. Specifically, we targeted certain sensitive-data fields that I felt would be amiss if an attacker were able to gain access. One of which, for example, displays the pricing. 

Secure Key Management: Securing of the secret keys is done through Django-cryptography, as the library allows us to set a default key as "SECRET_KEY." This library is coupled with the environ library, which together can store the secret key in an environment variable. The reason environ is key (no pun intended) in hiding is that without it, we are unable to store secret keys outside of key variables. In this case, we are given peace of mind if any attacker attempts to leverage settings.py for the key. 

Additionally, Secure Key Management would usually implement multi-factor authentication while giving the least number of user access (least privilege). In fact, the status of the secret key is not sufficient, as we need to store the key within the same few files. If the key itself is stored separate from the code and secured by authentication (potentially nonce based), it would be much more obscure and harder to crack.
